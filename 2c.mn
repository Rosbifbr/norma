// HELPERS
// Usage tip for vim - select numbers in visual mode then press ctrl- a for auto increment
// Rodrigo Ourique, Lucas Boeira

// limpa variável
operation clear(A){
 1: if zero A then goto 0 else goto 2
 2: do dec A goto 1
}

// A:=A+B (soma destrutiva)
operation soma(A,B){
  1: if zero B then goto 0 else goto 2
  2: do dec B goto 3
  3: do inc A goto 1
}

// A:=A-B (subtração destrutiva)
operation subtraction(A,B){
  1: if zero B then goto 0 else goto 2
  2: do dec B goto 3
  3: do dec A goto 1
}

// A:=A+B (soma não-destrutiva)
operation soma(A,B,C){
  1: if zero B then goto 5 else goto 2
  2: do dec B goto 3
  3: do inc A goto 4
  4: do inc C goto 1
  5: if zero C then goto 0 else goto 6
  6: do dec C goto 7
  7: do inc B goto 5
}

// A:=A-B (subtração não-destrutiva)
operation subtraction(A,B,C){
  1: if zero B then goto 5 else goto 2
  2: do dec B goto 3
  3: do dec A goto 4
  4: do inc C goto 1
  5: if zero C then goto 0 else goto 6
  6: do dec C goto 7
  7: do inc B goto 5
}

// A:=B (atribuição destrutiva)
operation load(A,B){
  1: do clear(A) goto 2
  2: do soma(A,B) goto 0
}

// A:=B usando C (atribuição não-destrutiva)
operation load(A,B,C){
  1: do clear(A) goto 2
  2: do soma(A,B,C) goto 0
}

// A:=A div 2 usando C (divisão inteira por 2)
operation div2(A,C){
  1: do load(C,A) goto 2
  2: if zero C then goto 0 else goto 3
  3: do dec C goto 4
  4: if zero C then goto 0 else goto 5
  5: do dec C goto 6
  6: do inc A goto 2
}

// A divisivel_por_2 usando C (teste se multiplo de 2)
test divBy2(A,C){
  1: do load(C,A) goto 2
  2: if zero C then goto true else goto 3
  3: do dec C goto 4
  4: do inc A goto 5
  5: if zero C then goto false else goto 6
  6: do inc A goto 7
  7: do dec C goto 2
}

// A:=fst(B) usando C,D (extrai o primeiro componente do par)
operation fst(A,B,C,D){
  1: do clear(A) goto 2
  2: do load(C,B,D) goto 3
  3: if divBy2(C,D) then goto 4 else goto 6
  4: do div2(C,D) goto 5
  5: do inc A goto 3
  6: do clear(C) goto 0
}

// A:=A div 3 usando C (divisão inteira por 3)
operation div3(A,C){
  1: do load(C,A) goto 2
  2: if zero C then goto 0 else goto 3
  3: do dec C goto 4
  4: if zero C then goto 0 else goto 5
  5: do dec C goto 6
  6: if zero C then goto 0 else goto 7
  7: do dec C goto 8
  8: do inc A goto 2
}

// A divisivel_por_3 usando C (teste se múltiplo de 3)
test divBy3(A,C){
  1: do load(C,A) goto 2
  2: if zero C then goto true else goto 3
  3: do dec C goto 4
  4: do inc A goto 5
  5: if zero C then goto false else goto 6
  6: do inc A goto 7
  7: do dec C goto 8
  8: if zero C then goto false else goto 9
  9: do dec C goto 10
 10: do inc A goto 2
}

// A:=snd(B) usando C,D (extrai o segundo componente do par)
operation snd(A,B,C,D){
  1: do clear(A) goto 2
  2: do load(C,B,D) goto 3
  3: if divBy3(C,D) then goto 4 else goto 6
  4: do div3(C,D) goto 5
  5: do inc A goto 3
  6: do clear(C) goto 0
}


// A:= A / B (non destructive)
operation division(A,B,C_aux,Q,R){
  1: if zero B then goto 0 else goto 2
  2: if zero A then goto 6 else goto 3
  3: do load(R,A,C_aux) goto 4
  4: do subtraction(A,B,C_aux) goto 5
  5: do inc Q goto 2
  // Q and R adjustment
  6: do subtraction(B,R,C_aux) goto 7
  7: if zero B then goto 8 else goto 11
  8: do load(B,R,C_aux) goto 9
  9: do load(A,Q,C_aux) goto 10
  10: do clear(R) goto 0
  11: do dec Q goto 12
  12: do load(A,Q,C_aux) goto 13
  13: do soma(B,R,C_aux) goto 0
}


//A := A * B (non destructive)
operation times(A,B,C,D){
  1: do load(D,A,C) goto 2
  2: do clear(A) goto 3 
  3: if zero D then goto 666 else goto 4 
  4: do soma(A,B,C) goto 5
  5: do dec D goto 3 
}


// A := A ^ B
operation exp(A,B,C,D,E){
  1: if zero B then goto 222 else goto 111
  222: do clear(A) goto 333
  333: do inc A goto 0

  111: do clear(C) goto 2
  2: do clear(D) goto 3

  //Prep counter
  3: do load(E,B) goto 4
  4: do sub E 1 goto 5

  //Prep A_c
  5: do load(B,A,C) goto 6

  //Iter
  6: if zero E then goto 666 else goto 7
  7: do times(A,B,C,D) goto 8
  8: do dec E goto 6
}


main {
  1: do load(First,X,C_aux) goto 2
  2: do load(Second,X,C_aux) goto 3
  3: do dec First goto 4
  4: do add Dois 2 goto 5
  5: do division(Second,Dois,C_aux,Quociente,Resto) goto 6
  6: do add Tres 3 goto 7
  7: do exp(Dois,First,C_aux,D_aux,E_aux) goto 8
  8: do exp(Tres,Second,C_aux,D_aux,E_aux) goto 9
  9: do times(Dois,Tres,C_aux,D_aux) goto 10
  10: do load(Y,Dois) goto 0
}
